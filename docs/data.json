{
    "project": {
        "name": "Gordon Server",
        "version": "0.1.0"
    },
    "files": {
        "lib\\structure\\room.js": {
            "name": "lib\\structure\\room.js",
            "modules": {
                "gordon": 1
            },
            "classes": {
                "Room": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\structure\\session.js": {
            "name": "lib\\structure\\session.js",
            "modules": {},
            "classes": {
                "Session": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\server.js": {
            "name": "lib\\server.js",
            "modules": {},
            "classes": {
                "Server": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "gordon": {
            "name": "gordon",
            "submodules": {},
            "classes": {
                "Room": 1,
                "Session": 1,
                "Server": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib\\server.js",
            "line": 8
        }
    },
    "classes": {
        "Room": {
            "name": "Room",
            "shortname": "Room",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gordon",
            "namespace": "",
            "file": "lib\\structure\\room.js",
            "line": 6,
            "description": "A session can be divided in any number of rooms. Rooms are where the clients communicate.\nEvery room is limited to a maximum number of clients."
        },
        "Session": {
            "name": "Session",
            "shortname": "Session",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gordon",
            "namespace": "",
            "file": "lib\\structure\\session.js",
            "line": 6,
            "description": "The session is the highest object in the Gordon hierarchy.\nEvery session is completely independent from other sessions.\nSessions can have {{#crossLink \"Room\"}}rooms{{/crossLink}}."
        },
        "Server": {
            "name": "Server",
            "shortname": "Server",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gordon",
            "namespace": "",
            "file": "lib\\server.js",
            "line": 8,
            "description": "The Gordon Server"
        }
    },
    "classitems": [
        {
            "file": "lib\\structure\\session.js",
            "line": 44,
            "description": "Creates a room.",
            "itemtype": "method",
            "name": "createRoom",
            "params": [
                {
                    "name": "roomUUID",
                    "description": "The session-wide unique room id.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "An options object.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "name",
                            "description": "The room name.",
                            "type": "String"
                        },
                        {
                            "name": "maxUsers",
                            "description": "The maximum number of users. Default is 50.",
                            "type": "Number"
                        },
                        {
                            "name": "persistent",
                            "description": "If a room is non-persitent, it will be removed when empty. Default is false.",
                            "type": "Boolean"
                        },
                        {
                            "name": "password",
                            "description": "Sets a password for this room. Default is no password.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "Data that should be stored with the room.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Session",
            "module": "gordon"
        },
        {
            "file": "lib\\structure\\session.js",
            "line": 96,
            "description": "Gets a room by its id.",
            "itemtype": "method",
            "name": "getRoom",
            "params": [
                {
                    "name": "roomUUID",
                    "description": "The session-wide unique room id.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The room instance.",
                "type": "Room"
            },
            "class": "Session",
            "module": "gordon"
        },
        {
            "file": "lib\\server.js",
            "line": 29,
            "description": "Creates the given number of userIds. This also defines the max number of users\nthat could connect to this server instance.",
            "itemtype": "method",
            "name": "createUserIds",
            "params": [
                {
                    "name": "amount",
                    "description": "The number of ids. Default is 500.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "add",
                    "description": "If true the new ids will be added, otherwise the existing ids will be cleared first. Default is false.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Server",
            "module": "gordon"
        },
        {
            "file": "lib\\server.js",
            "line": 41,
            "description": "Creates a session. There has to be at least one session per server instance.",
            "itemtype": "method",
            "name": "createSession",
            "params": [
                {
                    "name": "sessionUUId",
                    "description": "The server-wide unique session id.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "The session name.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Data that should be stored with the session.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A session instance.",
                "type": "Session"
            },
            "class": "Server",
            "module": "gordon"
        },
        {
            "file": "lib\\server.js",
            "line": 54,
            "description": "Sets the server configuration.",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "conf",
                    "description": "You could either pass an object or a filename.",
                    "type": "String | Object"
                }
            ],
            "class": "Server",
            "module": "gordon"
        },
        {
            "file": "lib\\server.js",
            "line": 70,
            "description": "Creates a new TCP server. The TCP server also supports Flash sockets and sends the\n\"cross domain policy\" file defined in the configuration accordingly.",
            "itemtype": "method",
            "name": "createTCPServer",
            "params": [
                {
                    "name": "port",
                    "description": "The port the server should listen.",
                    "type": "Number"
                }
            ],
            "class": "Server",
            "module": "gordon"
        },
        {
            "file": "lib\\server.js",
            "line": 89,
            "description": "Creates a new websocket server.",
            "itemtype": "method",
            "name": "createWebSocketServer",
            "params": [
                {
                    "name": "port",
                    "description": "The port the server should listen.",
                    "type": "Number"
                },
                {
                    "name": "checkOrigins",
                    "description": "A list of origins that should be checked.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "class": "Server",
            "module": "gordon"
        },
        {
            "file": "lib\\server.js",
            "line": 124,
            "description": "Gets the current milliseconds since server start.",
            "itemtype": "method",
            "name": "getCurrentMillis",
            "return": {
                "description": "The milliseconds",
                "type": "Number"
            },
            "class": "Server",
            "module": "gordon"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\structure\\session.js:96"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\server.js:41"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\server.js:124"
        }
    ]
}